{
	"In what EC1 EC2 PC1": [
		[
			"SELECT DISTINCT * WHERE { ?x rdfs:subClassOf <EC1>, [ a owl:Restriction ; owl:onProperty <PC1> ; owl:someValuesFrom <EC2> ] }",
			"SELECT DISTINCT * WHERE { <EC2> rdfs:subClassOf [ a owl:Restriction ; owl:onProperty <P1> ; owl:someValuesFrom ?x ] . ?x rdfs:subClassOf <E1> . filter(?x != <E1>) }"
		]
	],
	"Is EC1 EC2": [
		[
			"ASK WHERE { <EC1> rdfs:subClassOf <EC2> }"
		],
		[
			"ASK WHERE { <EC1> rdfs:subClassOf [ a owl:Restriction ; owl:onProperty <IS_EC2> ; owl:someValuesFrom <EC2> ] }"
		]
	],
	"Is EC1 EC2 for EC3": [
		[
			"ASK WHERE { <EC1> rdfs:subClassOf [ a owl:Restriction ; owl:onProperty <IS_EC2> ; owl:someValuesFrom <EC3> ] }"
		]
	],
	"Is EC1 EC2 or EC3": [
		[
			"SELECT DISTINCT * WHERE { <EC1> rdfs:subClassOf ?x . filter(?x in (<EC2>, <EC3>)) }"
		]
	],
	"Is there any EC1 for EC2 and where I PC1 EC3": [
		[
			"SELECT DISTINCT * WHERE { <EC2> rdfs:subClassOf [ rdf:type owl:Restriction ; owl:onProperty <HAS_EC1> ; owl:hasValue ?x] }"
		]
	],
	"EC1 PC1 EC2": [
		[
			"ASK WHERE { <EC1> rdfs:subClassOf [ a owl:Restriction ; owl:onProperty <PC1> ; owl:someValuesFrom <EC2> ] }",
			"ASK WHERE { <EC2> rdfs:subClassOf [ a owl:Restriction ; owl:onProperty <PC1> ; owl:someValuesFrom <EC1> ] }"
		]
	],
	"I PC1 EC1 PC1 EC2": [
		[
			"ASK WHERE { <EC1> rdfs:subClassOf [ a owl:Restriction ; owl:onProperty <PC1> ; owl:someValuesFrom <EC2> ] }",
			"ASK WHERE { <EC2> rdfs:subClassOf [ a owl:Restriction ; owl:onProperty <PC1> ; owl:someValuesFrom <EC1> ] }"
		]
	],
	"What EC1 PC1 EC2": [
		[
			"SELECT DISTINCT * WHERE { ?x rdfs:subClassOf <EC1>, [ a owl:Restriction ; owl:onProperty <PC1> ; owl:someValuesFrom <EC2> ] }",
			"SELECT DISTINCT * WHERE { <EC2> rdfs:subClassOf [a owl:Restriction ; owl:onProperty <PC1> ; owl:someValuesFrom ?x] . ?x rdfs:subClassOf <EC1> . filter(?x != <EC1>) }"
		]
	],
	"What PC1 EC1": [
		[
			"SELECT DISTINCT * WHERE { <EC1> rdfs:subClassOf [ a owl:Restriction ; owl:onProperty <PC1> ; owl:someValuesFrom ?x ] }"
		]
	],
	"What PC1 EC1 of EC2": [
		[
			"SELECT DISTINCT * WHERE { <EC2> rdfs:subClassOf [ a owl:Restriction ; owl:onProperty <PC1> ; owl:someValuesFrom ?x ] }"
		]
	],
	"What are the main categories of EC1": [
		[
			"SELECT ?x WHERE { ?x rdfs:subClassOf <EC1> . filter not exists { ?x rdfs:subClassOf ?y . ?y rdfs:subClassOf <EC1> . filter(?y != <EC1> && ?x != ?y) } filter(?x != <EC1> && ?x != owl:Nothing) }"
		]
	],
	"What are the main types of EC1": [
		[
			"SELECT ?x WHERE { ?x rdfs:subClassOf <EC1> . filter not exists { ?x rdfs:subClassOf ?y . ?y rdfs:subClassOf <EC1> . filter(?y != <EC1> && ?x != ?y) } filter(?x != <EC1> && ?x != owl:Nothing) }"
		]
	],
	"What are the main types of EC1 EC2 PC1": [
		[
			"SELECT ?x WHERE { ?x rdfs:subClassOf <EC1> . filter not exists { ?x rdfs:subClassOf ?y . ?y rdfs:subClassOf <EC1> . filter(?y != <EC1> && ?x != ?y) } filter(?x != <EC1> && ?x != owl:Nothing) }"
		]
	],
	"What are the possible types of EC1": [
		[
			"SELECT DISTINCT * WHERE { ?x rdfs:subClassOf <EC1> . filter(?x != <EC1> && ?x != owl:Nothing) }"
		]
	],
	"What are the types of EC1": [
		[
			"SELECT DISTINCT * WHERE { ?x rdfs:subClassOf <EC1> . filter(?x != <EC1> && ?x != owl:Nothing) }"
		]
	],
	"What is EC1 for EC2": [
		[
			"SELECT DISTINCT * WHERE { ?x rdfs:subClassOf <EC2>, [ a owl:Restriction ; owl:onProperty <HAS_EC1> ; owl:someValuesFrom <EC1> ] }"
		]
	],
	"What is EC1 of EC2": [
		[
			"SELECT DISTINCT * WHERE { <EC2> rdfs:subClassOf [ a owl:Restriction ; owl:onProperty <HAS_EC1> ; owl:hasValue ?x ] }"
		]
	],
	"What is EC1 of EC2 for EC3": [
		[
			"SELECT DISTINCT * WHERE { <EC3>, [ rdf:type owl:Restriction ; owl:onProperty <HAS_EC2> ; owl:someValuesFrom ?x ] }"
		]
	],
	"What is EC1 of EC2 that PC1 EC3": [
		[
			"SELECT DISTINCT * WHERE { ?x rdfs:subClassOf [ rdf:type owl:Restriction ; owl:onProperty <PC1> ; owl:someValuesFrom <EC3> ] . ?x rdfs:subClassOf* <EC1> }"
		]
	],
	"What is EC1 of EC2 that have EC3": [
		[
			"SELECT DISTINCT * WHERE { ?x rdfs:subClassOf [ rdf:type owl:Restriction ; owl:onProperty <HAS_EC3> ; owl:someValuesFrom <EC3> ] . ?x rdfs:subclassOf <EC2> }"
		]
	],
	"What is EC1 of EC2 that have EC3 and EC4": [
		[
			"SELECT DISTINCT * WHERE { ?x  rdfs:subClassOf  [ rdf:type owl:Restriction ; owl:onProperty <HAS_EC4> ; owl:someValuesFrom <EC4>] . ?x  rdfs:subClassOf [ rdf:type owl:Restriction ; owl:onProperty <HAS_EC3> ; owl:someValuesFrom <EC3>] }"
		]
	],
	"What is EC1 of EC2 that have EC3 as EC4": [
		[
			"SELECT DISTINCT * WHERE { ?x rdfs:subClassOf [ rdf:type owl:Restriction ; owl:onProperty <HAS_EC2> ; owl:someValuesFrom <EC4> ] . ?x rdfs:subClassOf* <EC3> }"
		]
	],
	"What kind of EC1 is EC2": [
		[
			"SELECT DISTINCT * WHERE { <EC2> rdfs:subClassOf ?x . ?x rdfs:subClassOf <EC1> . filter(?x != <EC1> && ?x != <EC2>) }"
		]
	],
	"What types of EC1 are EC2": [
		[
			"SELECT DISTINCT * WHERE { ?x rdfs:subClassOf <EC1> . ?y rdfs:subClassOf <EC2> . filter(?x != <EC1> && ?y != owl:Nothing) }"
		]
	],
	"Where I PC1 EC1": [
		[
			"SELECT DISTINCT * WHERE { <EC1> rdfs:subClassOf [a owl:Restriction ; owl:onProperty <PC1> ; owl:hasValue ?x ] }"
		]
	],
	"Where do I categorise EC1 like EC2": [
		[
			"SELECT DISTINCT * WHERE { <EC2> rdfs:subClassOf <EC1>, ?class . }"
		]
	],
	"Where is EC1 of EC2": [
		[
			"SELECT ?x WHERE { <EC2> rdfs:subClassOf [ rdf:type owl:Restriction ; owl:onProperty <HAS_EC1> ; owl:hasValue ?x ] . }"
		]
	],
	"Where's EC1 of EC2": [
		[
			"SELECT ?x WHERE { <EC2> rdfs:subClassOf [ rdf:type owl:Restriction ; owl:onProperty <HAS_EC1> ; owl:hasValue ?x ] . }"
		]
	],
	"Which EC1 PC1 EC2": [
		[
			"SELECT ?x WHERE { ?x rdfs:subClassOf <EC1> ; rdfs:subClassOf [ a owl:Restriction ; owl:onProperty <PC1> ; owl:someValuesFrom <EC2> ] .  }",
		    "SELECT DISTINCT * WHERE { <EC2> rdfs:subClassOf [ a owl:Restriction; owl:onProperty <PC1> ; owl:someValuesFrom ?x ] . ?x rdfs:subClassOf <EC1> . filter(?x != <EC1>) }"
		]
	],
	"How EC1 PC1 EC2": [
		[
			"SELECT ?x WHERE { ?x rdfs:subClassOf <EC1> ; rdfs:subClassOf [ a owl:Restriction ; owl:onProperty <PC1> ; owl:someValuesFrom <EC2> ] .  }",
			"SELECT DISTINCT * WHERE { <EC2> rdfs:subClassOf [ a owl:Restriction; owl:onProperty <PC1> ; owl:someValuesFrom ?x ] . ?x rdfs:subClassOf <EC1> . filter(?x != <EC1>) }"
		]
	],
	"Which EC1 are EC2 of EC3": [
		[
			"SELECT DISTINCT * WHERE { ?x rdfs:subClassOf <EC1>, [ a owl:Restriction ; owl:onProperty <IS_EC2> ; owl:someValuesFrom <EC3> ] . filter(?x != owl:Nothing) }",
			"SELECT DISTINCT * WHERE { <E3> rdfs:subClassOf [ a owl:Restriction ; owl:onProperty <IS_EC2> ; owl:someValuesFrom ?x ] . ?x rdfs:subClassOf <EC1> . filter(?x != <EC1>) }"
		]
	],
	"Which are EC1": [
		[
			"SELECT DISTINCT * WHERE { ?x rdfs:subClassOf <EC1> . filter(?x != <EC1> && ?x != owl:Nothing) }"
		]
	],
	"Which kind of EC1 are EC2": [
		[
			"SELECT DISTINCT * WHERE { <EC2> rdfs:subClassOf ?kind_of_stuff . ?kind_of_stuff rdfs:subClassOf <EC1> . filter(?kind_of_stuff != <EC1> ) }"
		]
	],
	"Which EC1 are EC2": [
			[
				"SELECT DISTINCT * WHERE { ?x rdfs:subClassOf <EC1> . ?x rdfs:subClassOf <EC2>}"
			]
		],
	"Which of EC1 EC2 PC1": [
		[
			"SELECT ?x WHERE { ?x rdfs:subClassOf <EC1>, [ a owl:Restriction ; owl:onProperty <PC1> ; owl:someValuesFrom <EC2> ]  }",
			"SELECT ?x WHERE { <EC2> rdfs:subClassOf [ a owl:Restriction ; owl:onProperty <PC1> ; owl:someValuesFrom ?x] . ?x rdfs:subClassOf <EC1> . filter(?x != <EC1>) . }"
		]
	]
}
